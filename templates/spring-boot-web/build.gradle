
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'

group = "${group}"
version = "${version}"

description = """Demo project for Spring Boot Web"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    //compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-web'
    runtime 'org.postgresql:postgresql'
    compile 'org.flywaydb:flyway-core'
    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:23.0'

    // Use the latest Groovy version for Spock testing
    testCompile 'org.codehaus.groovy:groovy-all:2.4.12'

    // Use the awesome Spock testing and specification framework even with Java
    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
    testCompile 'org.spockframework:spock-spring:1.1-groovy-2.4'
    testCompile 'junit:junit:4.12'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.flywaydb.flyway-test-extensions:flyway-spring-test:5.0.0'
    testRuntime 'com.h2database:h2'
}

jar {
    baseName = "${artifact}"
    manifest {
      attributes 'Main-Class': "${pkg}.DemoApplication"
    }
}

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/plugins-snapshot' }
    }
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.5.BUILD-SNAPSHOT'
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE'
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.8'
    }
}

apply plugin: 'com.bmuschko.docker-remote-api'

// Docker config
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

task createDockerImage(type: DockerBuildImage) {
    inputDir = file('.')
    tags = ["${artifact}-docker"]
}

String dev = "development"

String environment = System.getenv("JAVA_ENV") ?: dev

createDockerImage.enabled = dev.equals(environment)

build.finalizedBy(createDockerImage)