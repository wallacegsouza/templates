
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'

group = "${group}"
version = "${version}"

description = """Demo project for Spring Boot Web"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

String dev = 'development'
String test = 'test'
String prod = 'production'
String environment = project.hasProperty('jenv')? project.property('jenv') : dev

System.setProperty 'jenv', environment

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// In this section you declare where to find the dependencies of your project
repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    //compile 'org.springframework.boot:spring-boot-devtools'
    //compile 'org.springframework.data:spring-data-rest-hal-browser'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile test.equals(environment)? 'com.h2database:h2': 'org.postgresql:postgresql'

    compile 'org.flywaydb:flyway-core:5.0.7'

    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:23.0'

    //http://springfox.github.io/springfox/docs/snapshot/
    compile 'io.springfox:springfox-swagger2:2.8.0'
    compile 'io.springfox:springfox-swagger-ui:2.8.0'

    //These are the Elide dependencies
    compile 'com.yahoo.elide:elide-core:1.0.0.19'
    //We'll be using Hibernate 5, so we need the Elide Hibernate 5 datastore
    compile 'com.yahoo.elide:elide-datastore-hibernate5:1.0.0.19'
    //We then need to include Hibernate 5
    compile 'org.hibernate:hibernate-entitymanager:5.0.7.Final'
    compile 'org.hibernate:hibernate-core:5.0.7.Final'

    // Use the latest Groovy version for Spock testing
    testCompile 'org.codehaus.groovy:groovy-all:2.4.12'

    // Use the awesome Spock testing and specification framework even with Java
    testCompile 'org.spockframework:spock-core:1.1-groovy-2.4'
    testCompile 'org.spockframework:spock-spring:1.1-groovy-2.4'
    testCompile 'junit:junit:4.12'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.flywaydb.flyway-test-extensions:flyway-spring-test:5.0.0'
    testRuntime 'com.h2database:h2'
}

// BUILD

mainClassName = "${pkg}.DemoApplication"

apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'ru.vyarus.quality'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: "org.sonarqube"

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://repo.spring.io/plugins-snapshot' }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE'
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE'
        //Gradle plugin for managing Docker images and containers.
        //https://github.com/bmuschko/gradle-docker-plugin
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.8'
        //In the spirit of the Maven Versions Plugin, this plugin provides a task to
        // determine which dependencies have updates.
        //https://github.com/ben-manes/gradle-versions-plugin
        //>>> gradle dependencyUpdates -Drevision=release
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
        //Gradle quality plugin for Java and Groovy.
        //https://github.com/xvik/gradle-quality-plugin
        classpath 'ru.vyarus:gradle-quality-plugin:2.4.0'
        //Gradle plugin for running SonarQube analysis.
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
    }
}

quality {
    exclude '**/DemoApplication.java'
    strict = false
}

// Docker config
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

task createDockerImage(type: DockerBuildImage) {
    inputDir = file('.')
    tags = ["${artifact}"]
}

build.finalizedBy(createDockerImage)

createDockerImage.enabled = dev.equals(environment)
check.enabled = test.equals(environment)

apply from: rootProject.file('gradle/versions-plugin-check.gradle')

// The run task added by the application plugin is also of type JavaExec.
tasks.withType(JavaExec) {
    // Assign all Java system properties from the command line to the JavaExec task.
    systemProperties System.properties
}